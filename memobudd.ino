#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include <WiFi.h>
#include <ESPmDNS.h>
#include <ArduinoOTA.h>
#include <esp_wifi.h>
#include <debounce.h>
#include <LITTLEFS.h>
#include <ArduinoJson.h>

#define FORMAT_LITTLEFS_IF_FAILED false

const unsigned char wifi_settings_bmp [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0xff, 0xc0, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xf0, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xf0, 0x00, 0x7f, 0xc0, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xe0, 0x07, 0xff, 0xfc, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x80, 0x3f, 0xff, 0xff, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xe0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x80, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0xff, 0xe0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x19, 0x4c, 0x08, 0x0c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x19, 0x4f, 0x39, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x19, 0x4f, 0x39, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x19, 0x4f, 0x38, 0x1f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x0f, 0x39, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x8f, 0x39, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1d, 0xdc, 0x09, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char ota_settings_bmp [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xfe, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xf8, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xe0, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xc0, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xc0, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x80, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x80, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xc0, 0x00, 0x1e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xe0, 0x00, 0x1e, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0x00, 0x1e, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0x00, 0x1e, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xff, 0x00, 0x1e, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0x00, 0x1e, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x01, 0x9e, 0x70, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xdf, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xc1, 0xc0, 0xe3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0x9c, 0xf3, 0xc9, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0x9c, 0xf3, 0x9c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0x9c, 0xf3, 0x9c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0x9c, 0xf3, 0x80, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0x9c, 0xf3, 0x9c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xc1, 0xf3, 0x9c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

String wifi_ssid;
String wifi_password;
String wifi_ap_ssid;
String wifi_ap_password;

bool state_wifi_enabled = false;
bool state_bluetooth_enabled = false;
bool state_ota_enabled = false;

/* BUTTON PINS */
#define UP_BTN 4
#define ENTER_BTN 16
#define DOWN_BTN 17

/* BUZZER AND LED PINS */
#define BUZZER 5
#define LED_BUILTIN 2

/* DISPLAY SIZE */
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

DebouncedButton up_button;
DebouncedButton down_button;
DebouncedButton enter_button;
const unsigned long debounceDelay = 40;

const int WAKEUP_PIN = 4;

/* MENU STATES */
int current_menu_page = 0;
int current_menu_index = 0;
int selected_page = 0;

const char* menu_items[] = {
  "QUICK NOTES",
  "POMODORO TIMER",
  "FLASH CARDS",
  "REMINDERS",
  "BIBLE VERSE",
  "MEMOBUDD QUOTES",
  "SETTINGS"
};

const int menu_length = sizeof(menu_items) / sizeof(menu_items[0]);

/* SETTINGS MENU STATES */

int current_settings_page = 0;
int current_settings_index = 0;
int selected_settings = 0;
const char* settings_menu_items[] = {
  "WiFi",
  "Bluetooth",
  "OTA Update",
  "Config Portal",
  "Device Info",
  "Restart Device",
  "Exit Settings"
};

const int settings_menu_length = sizeof(settings_menu_items) / sizeof(settings_menu_items[0]);

/* POMODORO STATES */
bool pomodoro_break = false;
bool pomodoro_paused = false;
bool pomodoro_started = false;
int pomodoro_cycle = 0;
int pomodoro_seconds = 0;
int pomodoro_minutes = 0;
int pomodoro_selected = 0;
int current_pomodoro_index = 0;
const long pomodoro_timer_interval = 1000;
unsigned long previous_pomodoro_millis = 0;

typedef struct {
  int work_time;
  int break_time;
  int long_break_time;
  char label;
} PomodoroPreset;

PomodoroPreset pomodoro_presets[] = {
  {
    25,
    5,
    15,
    'S'
  },
  {
    15,
    3,
    5,
    'L'
  },
  {
    40,
    10,
    30,
    'F'
  }
};
const int pomodoro_options_length = sizeof(pomodoro_presets) / sizeof(pomodoro_presets[0]);

/* DISPLAY OBJECT */
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

/* ========== START UTILS ========== */
void centered_x(const char* text, int y, int textSize = 1) {
  display.setTextSize(textSize);
  int16_t x1,
  y1;
  uint16_t w,
  h;
  display.getTextBounds(text, 0, 0, &x1, &y1, &w, &h);
  int x = (SCREEN_WIDTH - w) / 2;
  display.setCursor(x, y);
  display.print(text);
}

void back_menu() {
  selected_page = 0;
}

void exit_screen(char* pagename) {
  display.clearDisplay();
  display.fillRect(26, 5 - 2, 74, 11, SH110X_WHITE);
  display.setTextColor(SH110X_BLACK);
  centered_x("CLICK ENTER", 5, 1);
  display.setTextColor(SH110X_WHITE);

  centered_x("EXIT", 20, 3);
  centered_x(pagename, 53, 1);
  display.display();

  if(debounce(enter_button)) {
    back_menu();
    current_pomodoro_index = 0;
  }
}

void set_pomodoro_timer(int minutes, int seconds) {
  pomodoro_minutes = minutes;
  pomodoro_seconds = seconds;
  if (pomodoro_seconds >= 60) {
    pomodoro_minutes += pomodoro_seconds / 60;
    pomodoro_seconds %= 60;
  }
}

void fs_write_file(fs::FS &fs, const char * path, const char * data) {
  File file = fs.open(path, FILE_WRITE);
  if(!file) {
    Serial.println("Failed to write file.");
    return;
  }
  if(file.print(data)) {
    Serial.println("File written");
  } else {
    Serial.println("Failed to sulat.");
  }
  file.close();
}

void fs_delete_file(fs::FS &fs, const char * path) {
  if(fs.remove(path)) {
    Serial.println("File deleted");
  } else {
    Serial.println("Failed to delete.");
  }
}

String fs_read_file(fs::FS &fs, const char * path) {
  File file = fs.open(path);
  if (!file || file.isDirectory()) {
    Serial.println("Failed to read file.");
    return "";
  }
  String data = "";
  while (file.available()) {
    data += (char)file.read();
  }
  file.close();
  return data;
}

void set_config(const char* ssid, const char* password, const char* ap_ssid, const char* ap_password) {
  DynamicJsonDocument newConf(256);
  newConf["wifi_ssid"] = String(ssid);
  newConf["wifi_password"] = String(password);
  newConf["wifi_ap_ssid"] = String(ap_ssid);
  newConf["wifi_ap_password"] = String(ap_password);

  char output[256];
  serializeJson(newConf, output);
  fs_write_file(LITTLEFS, "/config.json", output);

  wifi_ssid = String(ssid);
  wifi_password = String(password);
  wifi_ap_ssid = String(ap_ssid);
  wifi_ap_password = String(ap_password);
}

void enabled_wifi() {
  state_wifi_enabled = true;
  esp_wifi_start();
  WiFi.begin(wifi_ssid.c_str(), wifi_password.c_str());
}

void disable_wifi() {
  state_wifi_enabled = false;
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
  esp_wifi_stop();
}

/* ========== END UTILS ========== */

/* ========== SCREENS ========== */
void (*screens[])() = {
  menu_screen,
  quick_notes_screen,
  pomodoro_timer_screen,
  flashcard_screen,
  reminders_screen,
  bible_verse_screen,
  quotes_screen,
  settings_screen
};

/* ========== MENU SCREEN START ========== */
void menu_screen() {
  display.clearDisplay();

  if(selected_page != 0) return;

  if(!digitalRead(ENTER_BTN)) {
    if(!digitalRead(UP_BTN)) {
      ESP.restart();
      return;
    }
    if(!digitalRead(DOWN_BTN)) {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.print("Turning off...");
      display.display();
      delay(1000);
      display.clearDisplay();
      display.display();
      delay(1000);
      esp_deep_sleep_start();
      return;
    }
  }


  if(debounce(up_button)) {
    if (current_menu_index > 0) {
      current_menu_index--;
    } else if (current_menu_page > 0) {
      current_menu_page--;
      current_menu_index = 3;
    }
  }
  if(debounce(down_button)) {
    int startIndex = current_menu_page * 4;
    int endIndex = min(startIndex + 4, menu_length);
    if (current_menu_index < 3 && startIndex + current_menu_index + 1 < menu_length) {
      current_menu_index++;
    } else if (endIndex < menu_length) {
      current_menu_page++;
      current_menu_index = 0;
    }
  }
  if(debounce(enter_button)) {
    int selectedIndex = current_menu_page * 4 + current_menu_index;
    selected_page = selectedIndex + 1;

    if(selected_page == 7) {
      current_settings_page = 0;
      current_settings_index = 0;
    }
  }

  int startIndex = current_menu_page * 4;
  int endIndex = min(startIndex + 4, menu_length);
  display.clearDisplay();
  display.setCursor(0, 1);
  display.print("MEMOBUDD MENU");
  display.fillRect(114, 0, 20, 9, SH110X_WHITE);
  display.setTextColor(SH110X_BLACK);
  display.setCursor(116, 1);
  display.print("V1");
  display.setTextColor(SH110X_WHITE);

  display.drawLine(0, 10, 127, 10, SH110X_WHITE);
  for (int i = startIndex; i < endIndex; i++) {
    int yPos = 15 + (i - startIndex) * 13;
    if (i == startIndex + current_menu_index) {
      display.fillRect(0, yPos - 2, SCREEN_WIDTH, 11, SH110X_WHITE);
      display.setTextColor(SH110X_BLACK);
      display.setCursor(4, yPos);
      display.print(menu_items[i]);
      display.setTextColor(SH110X_WHITE);
    } else {
      display.setCursor(4, yPos);
      display.print(menu_items[i]);
    }
  }
  display.display();
}
/* ========== MENU SCREEN END ========== */

/* ========== QUICK NOTES SCREEN START ========== */
void quick_notes_screen() {
  display.clearDisplay();
  if(selected_page != 1) return;

  if(debounce(up_button)) {}
  if(debounce(down_button)) {}
  if(debounce(enter_button)) {
    back_menu();
  }


  display.setCursor(0, 0);
  display.print("Quick Notes");
  display.setCursor(0, 12);
  display.print("Press ENTER to go back");
  display.display();
}
/* ========== QUICK NOTES SCREEN END ========== */

/* ========== POMODORO TIMER SCREEN START ========== */
void pomodoro_timer_screen() {
  if(pomodoro_started && !pomodoro_paused) {
    unsigned long current_millis = millis();
    if(current_millis - previous_pomodoro_millis >= pomodoro_timer_interval) {
      previous_pomodoro_millis = current_millis;
      pomodoro_seconds--;
      if(pomodoro_seconds < 0) {
        pomodoro_seconds = 59;
        pomodoro_minutes--;
        if(pomodoro_minutes < 0) {
          /* COUNTDOWN ENDS */
          pomodoro_minutes = 0;
          pomodoro_seconds = 0;
          if(pomodoro_break) {
            set_pomodoro_timer(pomodoro_presets[current_pomodoro_index].work_time, 00);
            pomodoro_break = false;
            pomodoro_cycle++;
            digitalWrite(BUZZER, HIGH);
            delay(1000);
            digitalWrite(BUZZER, LOW);
          } else {
            if(pomodoro_cycle != 0 && pomodoro_cycle % 4 == 0) {
              set_pomodoro_timer(pomodoro_presets[current_pomodoro_index].long_break_time, 00);
              pomodoro_break = true;
              digitalWrite(BUZZER, HIGH);
              delay(500);
              digitalWrite(BUZZER, LOW);
              delay(100);
              digitalWrite(BUZZER, HIGH);
              delay(500);
              digitalWrite(BUZZER, LOW);
            } else {
              set_pomodoro_timer(pomodoro_presets[current_pomodoro_index].break_time, 00);
              pomodoro_break = true;

              digitalWrite(BUZZER, HIGH);
              delay(50);
              digitalWrite(BUZZER, LOW);
              delay(50);
              digitalWrite(BUZZER, HIGH);
              delay(50);
              digitalWrite(BUZZER, LOW);
              delay(50);
              digitalWrite(BUZZER, HIGH);
              delay(50);
              digitalWrite(BUZZER, LOW);
            }
          }
        }
      }
    }
  }

  if(debounce(up_button)) {
    if(pomodoro_started) {
      set_pomodoro_timer(pomodoro_presets[current_pomodoro_index].work_time, 00);
      pomodoro_cycle = 0;
      pomodoro_break = false;
      return;
    }
    if(current_pomodoro_index > 0) {
      current_pomodoro_index--;
    }
  }

  if(debounce(down_button)) {
    if(pomodoro_started) {
      pomodoro_started = false;
      return;
    }
    if(current_pomodoro_index < pomodoro_options_length) {
      current_pomodoro_index++;
    } else {
      pomodoro_started = false;
    }
  }

  if(current_pomodoro_index == pomodoro_options_length) {
    exit_screen("POMODORO TIMER");
    return;
  }

  if(debounce(enter_button)) {
    if(!pomodoro_started) {
      set_pomodoro_timer(pomodoro_presets[current_pomodoro_index].work_time, 00);
    } else {
      pomodoro_paused = !pomodoro_paused;
      digitalWrite(BUZZER, HIGH);
      delay(50);
      digitalWrite(BUZZER, LOW);
    }
    pomodoro_started = true;
    pomodoro_selected = current_pomodoro_index;
  }

  if(selected_page != 2) return;

  display.clearDisplay();

  display.setCursor(0, 1);
  display.print("POMODORO TIMER ");
  display.print(pomodoro_presets[current_pomodoro_index].label);

  if(pomodoro_started) {
    display.fillRect(119, 0, 9, 9, SH110X_WHITE);
    display.setTextColor(SH110X_BLACK);
    display.setCursor(121, 1);
    display.print(pomodoro_cycle);
    display.setTextColor(SH110X_WHITE);

    display.setTextSize(3);
    display.setCursor(20, 22);
    if(pomodoro_minutes < 10) display.print("0");
    display.print(pomodoro_minutes);
    display.print(":");
    if(pomodoro_seconds < 10) display.print("0");
    display.print(pomodoro_seconds);

    display.setTextSize(1);
    display.setTextColor(SH110X_BLACK);

    if(pomodoro_paused) {
      display.fillRect(97, 56 - 1, 35, 9, SH110X_WHITE);
      display.setCursor(98, 56);
      display.print("PAUSE");
    } else if (pomodoro_break) {
      display.fillRect(97, 56 - 1, 35, 9, SH110X_WHITE);
      display.setCursor(98, 56);
      display.print("BREAK");
    } else {
      display.fillRect(103, 56 - 1, 30, 9, SH110X_WHITE);
      display.setCursor(104, 56);
      display.print("WORK");
    }

    display.setTextColor(SH110X_WHITE);

    display.setCursor(0, 56);
    display.print(pomodoro_cycle != 0 && pomodoro_cycle % 4 == 0 ? "LB": "SB");
    display.setTextColor(SH110X_WHITE);

    display.display();
  } else {
    display.setTextSize(2);
    display.setCursor(pomodoro_presets[current_pomodoro_index].work_time >= 10 ? 31: 38, 22);
    display.print(String(pomodoro_presets[current_pomodoro_index].work_time));
    display.setCursor(pomodoro_presets[current_pomodoro_index].break_time >= 10 ? 77: 84, 22);
    display.print(String(pomodoro_presets[current_pomodoro_index].break_time));
    display.fillRect(25, 43 - 1, 34, 10, SH110X_WHITE);
    display.fillRect(71, 43 - 1, 36, 10, SH110X_WHITE);
    display.setTextSize(1);
    display.setTextColor(SH110X_BLACK);
    display.setCursor(30, 43);
    display.print("WORK");
    display.setCursor(74, 43);
    display.print("BREAK");
    display.setTextColor(SH110X_WHITE);
    display.display();
  }
}
/* ========== POMODORO TIMER SCREEN END ========== */

/* ========== FLSHCARD SCREEN START ========== */
void flashcard_screen() {
  display.clearDisplay();
  if(selected_page != 3) return;

  if(debounce(up_button)) {}
  if(debounce(down_button)) {}
  if(debounce(enter_button)) {
    back_menu();
  }

  display.setCursor(0, 0);
  display.print("FLASHCARD");
  display.setCursor(0, 12);
  display.print("Press ENTER to go back");
  display.display();
}
/* ========== FLASHCARD SCREEN END ========== */

/* ========== REMINDERS SCREEN START ========== */
void reminders_screen() {
  display.clearDisplay();
  if(selected_page != 4) return;

  if(debounce(up_button)) {}
  if(debounce(down_button)) {}
  if(debounce(enter_button)) {
    back_menu();
  }

  display.setCursor(0, 0);
  display.print("Reminders");
  display.setCursor(0, 12);
  display.print("Press ENTER to go back");
  display.display();
}
/* ========== REMINDERS SCREEN END ========== */

/* ========== BIBLE VERSE SCREEN START ========== */
void bible_verse_screen() {
  display.clearDisplay();

  if(selected_page != 5) return;

  if(debounce(up_button)) {}
  if(debounce(down_button)) {}
  if(debounce(enter_button)) {
    back_menu();
  }

  display.setCursor(0, 0);
  display.print("Bible Verse");
  display.setCursor(0, 12);
  display.print("Press ENTER to go back");
  display.display();
}
/* ========== BIBLE VERSE SCREEN END ========== */

/* ========== QUOTES SCREEN START ========== */
void quotes_screen() {
  display.clearDisplay();

  if(selected_page != 6) return;

  if(debounce(up_button)) {}
  if(debounce(down_button)) {}
  if(debounce(enter_button)) {
    back_menu();
  }

  display.setCursor(0, 0);
  display.print("HALUUU");
  display.display();
}
/* ========== QUOTES SCREEN END ========== */

/* ========== SETTINGS SCREEN START ========== */

void settings_screen() {
  display.clearDisplay();
  if(selected_page != 7) return;

  if(selected_settings == 1) {
    if(debounce(enter_button)) {
      if(state_wifi_enabled) {
        disable_wifi();
      } else {
        enabled_wifi();
      }
    }
    
    if(debounce(down_button)) {
      selected_settings = 0;
    }
    
    display.drawBitmap(0, 0, wifi_settings_bmp, SCREEN_WIDTH, SCREEN_HEIGHT, SH110X_WHITE);
    display.setCursor(64, 0);
    display.print(state_wifi_enabled ? "ON" : "OFF");
    
    display.setCursor(64, 12);
    display.print(WiFi.status() == WL_CONNECTED ? "CONNECTED" : "NOT CONNECTED");
    
    display.display();
  } else if (selected_settings == 3) {
    if(debounce(down_button)) {
      selected_settings = 0;
    }
    
    state_ota_enabled = true;
    display.drawBitmap(0, 0, ota_settings_bmp, SCREEN_WIDTH, SCREEN_HEIGHT, SH110X_WHITE);
    
    if (WiFi.status() == WL_CONNECTED) {
      ArduinoOTA.onStart([]() {
        Serial.println("Started!");
        display.clearDisplay();
        centered_x("OTA_MODE", 20, 2);
        centered_x("Uploading sketch...", 48, 1);
        display.display();
      });
      ArduinoOTA.onEnd([]() {
        Serial.println("Done!");
      });
      ArduinoOTA.onError([](ota_error_t error) {
        Serial.println("Error!");
      });
      ArduinoOTA.begin();
      display.setCursor(0, 0);
      display.print("OTA STARTED!");
    } else {
      display.setCursor(64, 5);
      display.print("NETWORK ERROR");
    }
    display.display();
  } else if(selected_settings == 6) {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.print("Restarting Device...");
    display.display();
    delay(1000);
    ESP.restart();
  } else if(selected_settings == 7) {
    back_menu();
    selected_settings = 0;
  } else {

    if(debounce(up_button)) {
      if (current_settings_index > 0) {
        current_settings_index--;
      } else if (current_settings_page > 0) {
        current_settings_page--;
        current_settings_index = 3;
      }
    }
    if(debounce(down_button)) {
      int startIndex = current_settings_page * 4;
      int endIndex = min(startIndex + 4, menu_length);
      if (current_settings_index < 3 && startIndex + current_settings_index + 1 < settings_menu_length) {
        current_settings_index++;
      } else if (endIndex < settings_menu_length) {
        current_settings_page++;
        current_settings_index = 0;
      }
    }
    if(debounce(enter_button)) {
      int selectedIndex = current_settings_page * 4 + current_settings_index;
      selected_settings = selectedIndex + 1;
    }

    int startIndex = current_settings_page * 4;
    int endIndex = min(startIndex + 4, menu_length);
    display.clearDisplay();
    display.setCursor(0, 1);
    display.print("DEVICE SETTINGS");

    display.drawLine(0, 10, 127, 10, SH110X_WHITE);
    for (int i = startIndex; i < endIndex; i++) {
      int yPos = 15 + (i - startIndex) * 13;
      if (i == startIndex + current_settings_index) {
        display.fillRect(0, yPos - 2, SCREEN_WIDTH, 11, SH110X_WHITE);
        display.setTextColor(SH110X_BLACK);
        display.setCursor(4, yPos);
        display.print(settings_menu_items[i]);
        display.setTextColor(SH110X_WHITE);
      } else {
        display.setCursor(4, yPos);
        display.print(settings_menu_items[i]);
      }
    }
    display.display();
  }
}

/* ========== SETUP AND LOOP FUNCTION BELOW MAIN ========== */

void init_buttons() {
  initDebouncedButton(up_button, UP_BTN, debounceDelay);
  initDebouncedButton(down_button, DOWN_BTN, debounceDelay);
  initDebouncedButton(enter_button, ENTER_BTN, debounceDelay);
}

void setup_pins() {
  pinMode(UP_BTN, INPUT_PULLUP);
  pinMode(ENTER_BTN, INPUT_PULLUP);
  pinMode(DOWN_BTN, INPUT_PULLUP);
  pinMode(BUZZER, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
}

void init_config() {
  String config = fs_read_file(LITTLEFS, "/config.json");

  if(config == "") {
    Serial.println("Failed to read configurations");
    display.print("Failed to read configurations.");
    return;
  }

  if (config != "") {
    DynamicJsonDocument conf(512);
    DeserializationError error = deserializeJson(conf, config);
    if(error) {
      Serial.println("Failed to read config file.");
      return;
    }
    wifi_ssid = conf["wifi_ssid"].as < String > ();
    wifi_password = conf["wifi_password"].as < String > ();
    wifi_ap_ssid = conf["wifi_ap_ssid"].as < String > ();
    wifi_ap_password = conf["wifi_ap_password"].as < String > ();
  }
}

void setup() {
  Wire.begin();
  Serial.begin(115200);

  if(!LITTLEFS.begin(FORMAT_LITTLEFS_IF_FAILED)) {
    Serial.println("LittleFS Mount Failed!");
    return;
  }

  setup_pins();
  init_buttons();
  init_config();

  if (!display.begin(0x3C, true)) {
    for (;;);
  }

  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.clearDisplay();
}

void loop() {
  screens[selected_page]();
  if(state_ota_enabled) {
    ArduinoOTA.handle();
  }
}